{"version":3,"file":"lib_index_js.f34931369633d4d3056f.js","mappings":";;;;;;;;;;;;;;;;;;;AAAuD;AACN;AACR;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,2DAAS;AACzC;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0BAA0B,iBAAiB,kCAAkC;AAC7E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,SAAS,EAAC;AACzB,+BAA+B,mDAAM;AACrC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@jupyterlab-examples/widgets/./lib/index.js"],"sourcesContent":["import { ICommandPalette } from '@jupyterlab/apputils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { Widget } from '@lumino/widgets';\n/**\n * Activate the whiteboard extension.\n */\nconst extension = {\n    id: '@jupyterlab-examples/whiteboard:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, ILauncher],\n    activate: (app, palette, launcher) => {\n        const { commands, shell } = app;\n        const command = 'whiteboard:open';\n        commands.addCommand(command, {\n            label: 'Open Whiteboard',\n            caption: 'Open a whiteboard to draw on',\n            execute: () => {\n                const whiteboardWidget = new WhiteboardWidget();\n                shell.add(whiteboardWidget, 'main');\n            }\n        });\n        // Add the command to the palette\n        palette.addItem({ command, args: {}, category: 'Extension Examples' });\n        // Add the widget to the launcher\n        launcher.add({\n            command: command,\n            category: 'Other',\n            rank: 0,\n        });\n    }\n};\nexport default extension;\nclass WhiteboardWidget extends Widget {\n    constructor() {\n        super();\n        this.isDrawing = false;\n        this.lastX = 0;\n        this.lastY = 0;\n        this.eraserMode = false; // Initialize with a default value\n        this.addClass('whiteboard-widget');\n        this.id = 'whiteboard-widget';\n        this.title.label = 'Whiteboard';\n        this.title.closable = true;\n        // Create a canvas element for drawing\n        const canvas = document.createElement('canvas');\n        canvas.width = 1800;\n        canvas.height = 1000;\n        this.node.appendChild(canvas);\n        // Get the 2D rendering context of the canvas\n        this.context = canvas.getContext('2d');\n        if (this.context !== null) {\n            this.context.strokeStyle = 'black';\n            this.context.lineWidth = 2;\n            // Add event listeners for drawing on the canvas\n            canvas.addEventListener('mousedown', this.startDrawing.bind(this));\n            canvas.addEventListener('mousemove', this.draw.bind(this));\n            canvas.addEventListener('mouseup', this.stopDrawing.bind(this));\n            canvas.addEventListener('mouseout', this.stopDrawing.bind(this));\n            // Add event listener for toggling eraser mode\n            canvas.addEventListener('dblclick', this.toggleEraserMode.bind(this));\n        }\n    }\n    startDrawing(event) {\n        this.isDrawing = true;\n        [this.lastX, this.lastY] = [event.offsetX, event.offsetY];\n    }\n    draw(event) {\n        if (!this.isDrawing)\n            return;\n        if (this.context === null)\n            return;\n        if (this.eraserMode) {\n            this.context.clearRect(event.offsetX - 10, event.offsetY - 10, 20, 20);\n        }\n        else {\n            this.context.beginPath();\n            this.context.moveTo(this.lastX, this.lastY);\n            this.context.lineTo(event.offsetX, event.offsetY);\n            this.context.stroke();\n            [this.lastX, this.lastY] = [event.offsetX, event.offsetY];\n        }\n    }\n    stopDrawing() {\n        this.isDrawing = false;\n    }\n    toggleEraserMode() {\n        if (this.context !== null) {\n            this.eraserMode = !this.eraserMode;\n            this.context.lineCap = this.eraserMode ? 'square' : 'round';\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}